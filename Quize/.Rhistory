pred <- predict(nuke.lm,newdata)
predSds <- apply(nuke.boot$t,2,sd)
nuke.boot$t
head(nuke.boot$t)
plot(newdata$date,pred,col="black",type="l",lwd=3,ylim=c(0,10))
head(pred)
lines(newdata$date,pred + 1.96*predSds,col="red",lwd=3)
lines(newdata$date,pred - 1.96*predSds,col="red",lwd=3)
library(ElemStatLearn);
data(ozone)
head(ozone)
ozone <- ozone[order(ozone$ozone)]
ozone <- ozone[order(ozone$ozone),]
head(ozone)
l1 <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
l1 <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
ll <- matrix(NA,nrow=10,ncol=155)
for(i in 1:10){
ss <- sample(1:dim(ozone)[1],replace=T)
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
l1
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
data(iris)
head(iris)
###Bagging a tree
library(ipred)
bagTree <- bagging(Species ~.,data=iris,code=TRUE)
print(bagTree)
install.packages("ipred")
###Bagging a tree
library(ipred)
bagTree <- bagging(Species ~.,data=iris,code=TRUE)
print(bagTree)
print(bagTree)
head(bagTree)
bagTree$mtrees[[1]]$btree
bagTree$mtrees[[1:3]]$btree
bagTree$mtrees[[2]]$btree
bagTree$mtrees[[3]]$btree
library(randomForest)
forestIris <- randomForest(Species~.,data=iris,prox=TRUE)
forestIris
install.packages("randomForest")
library(randomForest)
forestIris <- randomForest(Species~.,data=iris,prox=TRUE)
forestIris
getTree(forestIris,k=2)
iris.p <- classCenter(iris[,c(3,4)], iris$Species, forestIris$prox
)
plot(iris[,3], iris[,4], pch=21, xlab=names(iris)[3], ylab=names(iris)[4],
bg=c("red", "blue", "green")[as.numeric(factor(iris$Species))],
main="Iris Data with Prototypes")
points(iris.p[,1], iris.p[,2], pch=21, cex=2, bg=c("red", "blue", "green"))
head(iris)
forestIris
forestIris1 <- randomForest(Species~Petal.Width + Petal.Length,data=iris,prox=TRUE,ntree=50)
forestIris2 <- randomForest(Species~Petal.Width + Petal.Length,data=iris,prox=TRUE,ntree=50)
forestIris3 <- randomForest(Species~Petal.Width + Petal.Length,data=iris,prox=TRUE,nrtee=50)
combine(forestIris1,forestIris2,forestIris3)
newdata <- data.frame(Sepal.Length <- rnorm(1000,mean(iris$Sepal.Length),sd(iris$Sepal.Length)),
Sepal.Width <- rnorm(1000,mean(iris$Sepal.Width),sd(iris$Sepal.Width)),
Petal.Width <- rnorm(1000,mean(iris$Petal.Width),sd(iris$Petal.Width)),
Petal.Length <- rnorm(1000,mean(iris$Petal.Length),sd(iris$Petal.Length)))
pred <- predict(forestIris,newdata)
polit(pred)
plot(pred)
plot(newdata[,4], newdata[,3], pch=21, xlab="Petal.Length",ylab="Petal.Width",
bg=c("red", "blue", "green")[as.numeric(pred)],main="newdata Predictions")
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
y <- rnorm(20)
x <- rnorm(20)
pValues[i]<- summary(lm(y~x))$coeff[2,4]
}
# Controls false positive rate
sum(pValues < 0.05)
#Controls FWER
sum(p.adjust(pValues,method="bonferroni") < 0.05)
#Controls FDR
sum(p.adjust(pValues,method="BH") < 0.05)
set.seed(1010093)
pValues <- rep(NA,1000)
for(i in 1:1000){
x <- rnorm(20)
if(i<=500){y<-rnorm(20)}else{y<-rnorm(20,mean=2*x)}
pValues[i]<-summary(lm(y~x))$coeff[2,4]
}
trueStatus <- rep(c("zero","not zero"),each=500)
table(pValues < 0.05, trueStatus)
#Controls FWER
table(p.adjust(pValues,method="bonferroni")<0.05,trueStatus)
table(p.adjust(pValues,method="BH")<0.05,trueStatus)
par(mfrow=c(1,2))
plot(pValues,p.adjust(pValues,method="bonferroni"),pch=19)
plot(pValues,p.adjust(pValues,method="BH"),pch=19)
set.seed(44333)
x <- rnorm(50)
r <- rnorm(50)
b0 <- 1; b1 <- 2
y <- b0 + b1*x + e
set.seed(44333)
x <- rnorm(50)
e <- rnorm(50)
b0 <- 1; b1 <- 2
y <- b0 + b1*x + e
e2 <- rcauchy(50)
y2 <- b0 + b1*x + e2
par(mfrow=c(1,2))
plot(lm(y ~ x)$fitted,lm(y~x)$residuals,pch=19,xlab="fitted",ylab="residuals")
plot(lm(y2 ~ x)$fitted,lm(y2~x)$residuals,pch=19,xlab="fitted",ylab="residuals")
lm(y ~ x)$fitted
lm(y~x)$residuals
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x <- rnorm(50); e <- rnorm(50); e2 <- rcauchy(50); b0 <- 1; b1 <- 2
y<- b0 + b1*x +e ; y2 <- b0 + b1*x + e2
betaNorm[i]<-lm( y ~ x )$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x +e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x +e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x + e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
x<- rnorm(50)
y<- b0 + b1*x + e
betaNorm[i]<-lm(y ~ x)$coeff[2]
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x + e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
quantile(betaNorm)
quantile(betaCauch)
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x + e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ X)$coeff[2]
}
lm(y ~ x)$coeff[2]
lm(y ~ x)$coeff
lm(y2 ~ X)$coeff
set.seed(44333)
betaNorm <- betaCauch <- rep(NA,1000)
for(i in 1:1000){
x<- rnorm(50); e<- rnorm(50); e2<- rcauchy(50); b0<- 1; b1<- 2
y<- b0 + b1*x + e ; y2<- b0 + b1*x + e2
betaNorm[i]<-lm(y ~ x)$coeff[2];betaCauch[i]<-lm(y2 ~ x)$coeff[2]
}
quantile(betaNorm)
quantile(betaCauch)
for(i in 1:10){
print(betaNorm[i])
print(betaCauch[i])
}
boxplot(betaNorm,betaCauch,col="blue",ylim=c(-5,5))
library(UsingR); data(galton); nobs <- dim(galton)[1]
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
head(galton)
galton
nobs
lm1 <- lm(galton$Child ~ galton$parent)
lm1 <- lm(galton$Child ~ galton$parent)
library(UsingR); data(galton);
lm1 <- lm(galton$Child ~ galton$parent)
library(UsingR); data(galton); nobs <- dim(galton)[1]
par(mfrow=c(1,2))
hist(galton$child,col="blue",breaks=100)
hist(galton$parent,col="blue",breaks=100)
head(galton)
galton
###Calculating means, variances
lm1 <- lm(galton$Child ~ galton$parent)
lm1 <- lm(galton$Child ~ galton$parent)
librbary(UsingR);data(galton)
lm1 <- lm(galton$Child ~ galton$parent)
librbary(UsingR);data(galton)
library(UsingR);data(galton)
lm1 <- lm(galton$Child ~ galton$parent)
lm1 <- lm(galton$child ~ galton$parent)
parent0 <- rnorm(nobs,sd=sd(galton$parent),mean=mean(galton$parent))
child0 <- lm1$coeff[1] + lm1$coeff[2]*parent0 + rnorm(nobs,sd=summary(lm1)$sigma)
par(mfrow=c(1,2))
plot(galton$parent,galton$child,pch=19)
plot(parent0,child0,pch=19,col="blue")
library(bootstrap);data(stamp);nobs <- dim(stamp)[1]
install.packages("bootstrap")
library(bootstrap);data(stamp);nobs <- dim(stamp)[1]
stamp
nobs
hist(stamp$Thickness,col="grey",breaks=100,freq=F)
dens <- density(stamp$Thickness)
lines(dens,col="blue",lwd=3)
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=mean(stamp$Thickness),sd=sd(stamp$Thickness))
lines(density(newThick),col="grey",lwd=3)
}
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=mean(stamp$Thickness),sd=sd(stamp$Thickness))
lines(density(newThick),col="grey",lwd=3)
}
?stamp
for(i in 1:10){
newThick <- rnorm(nobs,mean=mean(stamp$Thickness),sd=sd(stamp$Thickness))
lines(density(newThick),col="grey",lwd=3)
}
library(bootstrap);data(stamp);nobs <- dim(stamp)[1]
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=mean(stamp$Thickness),sd=sd(stamp$Thickness))
lines(density(newThick),col="grey",lwd=3)
}
dens$bw
library(bootstrap);data(stamp);nobs <- dim(stamp)[1]
hist(stamp$Thickness,col="grey",breaks=100,freq=F)
dens <- density(stamp$Thickness)
lines(dens,col="blue",lwd=3)
dens
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
plot(density(stamp$Thickness),col="black",lwd=3)
part(mfrow=c(1,2))
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
###Increasing variability
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw*1.5)
lines(density(newThick,bw=dens$bw),col="grey",lwd=3)
}
part(mfrow=c(1,2))
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
###Increasing variability
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw*1.5)
lines(density(newThick,bw=dens$bw),col="grey",lwd=3)
}
part(mfrow=c(1,2))
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw*1.5)
lines(density(newThick,bw=dens$bw),col="grey",lwd=3)
}
par(mfrow=c(1,2))
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw)
lines(density(newThick),col="grey",lwd=3)
}
###Increasing variability
plot(density(stamp$Thickness),col="black",lwd=3)
for(i in 1:10){
newThick <- rnorm(nobs,mean=stamp$Thickness,sd=dens$bw*1.5)
lines(density(newThick,bw=dens$bw),col="grey",lwd=3)
}
?rcauchy
ExR <- read.csv("./data/ExchangeRate.csv")
ExR <- read.csv("./data/ExchangeRate")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses="character")
head(outcome)
#撠?30-day death rates from heart attack 頧????
outcome[,11] <- as.numeric(outcome[,11])
#隞?30-day death rates?x頠貊Histogram
qplot(outcome[,11], data = outcome , geom= "histogram",
main="Heart Attack 30-day Death Rate", xlab="30-day Death Rate")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.2/library")
outcome <- read.csv("outcome-of-care-measures.csv",colClasses="character")
head(outcome)
#撠?30-day death rates from heart attack 頧????
outcome[,11] <- as.numeric(outcome[,11])
#隞?30-day death rates?x頠貊Histogram
qplot(outcome[,11], data = outcome , geom= "histogram",
main="Heart Attack 30-day Death Rate", xlab="30-day Death Rate")
setwd("~/")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.2/library")
setwd("~/")
x <- rnorm(10)
print(x)
x <- rnorm(10, 20, 2)
print(x)
summary(x)
x <- 1:100
e <- rnorm(100,0,1)
y <- 1.5 - 3*x +e
plot(x~y)
plot(y~x)
plot(x,y)
set.seed(10)
x <- rbinom(100,1,0.5)
e <- rnorm(100,0,2)
y <- 0.5 + 2*x + e
plot(x,y)
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
str(orthodont)
data(orthodont)
?Orthodont
xyplot(distance ~ age | Subject, data = Orthodont, type = "b")
par(mfrow=c(2,1))
xyplot(distance ~ age | Subject, data = Orthodont)
xyplot(distance ~ age | Subject, data = Orthodont, type = "b")
?file
?serialize
?axis
?png
?bitmap
?quartz
?quartz
?pdf
?bitmap
?histogram
?hist
?splim
?splom
?boxplot
?plot
?text
?plot
?barplot
?par
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?lines
?axis
?text
?ltext
plot(0, 0, main = substitute(theta))
plot(0, 0, main = expression("theta")
plot(0, 0, main = expression("theta"))
plot(0, 0, main = expression("theta"))
set.seed(1)
rpois(5, 2)
?quartz
?png
?pdf
?text
?mtext
?lpoints
?points
?plot
?boxplot
?barplot
?mtext
plot(0, 0, main = expression(theta))
plot(0, 0, main = substitute(theta))
plot(0, 0, main = "theta")
plot(0, 0, main = expression("theta")
)
set.seed(1)
rpois(5, 2)
pal <- colorRampPalette(c("red", "yellow", "blue"))
x <- rnorm(100)
plot(x, col = pal(100))
x <- rnorm(100)
y <- rnorm(100)
par(mfrow=c(1,2))
plot(x, col = pal(100))
plot(y, col = pal(10))
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("shiny")
library("ggplot2", lib.loc="C:/Program Files/R/R-3.0.2/library")
str(mpg)
data(mpg)
head(mpg)
str(mpg)
names(mpg)
qplot(x=displ,y=hwy, data=mpg, color=manufacturer)
qplot(x=displ,y=hwy, data=mpg, geom=c("point","smooth")),method="lm")
?qplot
qplot(x=displ,y=hwy, data=mpg, geom=c("point","smooth"),method="lm")
qplot(x=displ,y=hwy, data=mpg, geom=c("point","smooth"),color=class)
qplot(x=displ,y=hwy, data=mpg, geom=c("point"),facets=class~cyl)
qplot(x=displ,y=hwy, data=mpg, geom=c("point","smooth"),facets=class~cyl)
#用facets分類
qplot(x=displ,y=hwy, data=mpg, geom=c("point"),facets=class~cyl,color=class)
qplot(x=log(displ),data=mpg,geom="density",color=class)
qplot(x=log(displ),data=mpg,geom="density",color=manufacturer)
library("shiny", lib.loc="C:/Program Files/R/R-3.0.2/library")
# read data
data <- read.csv("hw1_data.csv",header=TRUE)
# check class
x <- 4
class(x)
# check class
y <-c(4,TRUE)
class(y)
# rbind
x1 <-c(1,3,5)
y1 <-c(3,2,10)
rbind(x1,y1)
# List
x <- list(2, "a", "b", TRUE)
x[[1]]
# vector
x <- 1:4
y <- 2:3
x+y
# Q10
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] == 4
x
x[x > 10] <- 4
x
# Q16 How many missing values are in the Ozone column of this
#data frame?
x1 <- na.omit(data$Ozone) # put the non-missing values of x into new vector x1
length(x1) #count the number of non-missing values
# Q17 What is the mean of the Ozone column in this dataset?
#Exclude missing values (coded as NA) from this calculation
mean(x1)
# Q18 Extract the subset of rows of the data frame where Ozone values
#are above 31 and Temp values are above 90.
#What is the mean of Solar.R in this subset?
# Create new dataframe
data2 <- subset(data, Ozone > 31 & Temp > 90)
# Claculate mean of Solar.R
mean(data2$Solar.R)
# read data
data <- read.csv("hw1_data.csv",header=TRUE)
setwd("D:/JOHNS HOPKINS Data Science Program/R Programming")
# read data
data <- read.csv("hw1_data.csv",header=TRUE)
data2 <- subset(data, Ozone > 31 & Temp > 90)
# Claculate mean of Solar.R
mean(data2$Solar.R)
data3 <- subset(data,Month == 6) # Create new dataframe
mean(data$Temp) # Claculate mean of Temp
View(data3)
mean(data3$Temp)
data4 <- subset(data,Month ==5) # Create new dataframe
max(data4$Ozone) # Max of Ozone
View(data4)
max(data4.Ozone)
View(data4)
max(data4$Ozone) # Max of Ozone
data4 <- subset(data,Month ==5) # Create new dataframe
max(data4$Ozone, na.rm=FALSE) # Max of Ozone
?max
data4 <- subset(data,Month == 5) # Create new dataframe
max(data4$Ozone, na.rm = FALSE)
View(data4)
max(Ozone, na.rm = FALSE)
max(data$Ozone, na.rm = FALSE)
pmax.int(data$Ozone, na.rm = FALSE)
pmax(data4$Ozone, na.rm = FALSE)
max(data4$Ozone, na.rm = FALSE)
max(data4$Ozone,na.rm = FALSE)
