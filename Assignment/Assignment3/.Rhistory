cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
bmatrix <- makeCacheMatrix()
bmatrix$get()
Class(amatrix)
class(amatrix)
class(amatrix$set)
?solve
CacheSolve(amatrix)
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
cacheSolve(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inver) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinverse <- function(inver) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(data) m <<- data
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
attributes(x)
attributes(amatrix)
#Create a special "matrix" object that can cache ists inverse.
makeCacheMatrix <- function(x = numeric()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function()x
setinverse <- function(inverse) inver <<- inverse
getinverse <- function() inver
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
#Computes the inverse of the special "matrix" returned by
#makeCacheMatrix above
cacheSolve <- function(x, ...) {
inver <- x$getinverse()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinverse(inver)
inver
}
amatrix <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
#best function
best <- function(state, outcome){
#讀取outcome-of-care-measures.csv
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name for min row
if(outcome == "heart attack" ){
irow <- which.min(subdata[,11])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "heart failure"){
irow <- which.min(subdata[,17])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "pneumonia"){
irow <- which.min(subdata[,23])
print(subdata[irow,]$Hospital.Name)
}
}
source("best.R")
best("TX", "heart attack")
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#best function
best <- function(state, outcome){
#讀取outcome-of-care-measures.csv
data <- read.csv("outcome-of-care-measures.csv",colClasses="character",na.strings=c("Not Available","NA"))
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name for min row
if(outcome == "heart attack" ){
irow <- which.min(subdata[,11])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "heart failure"){
irow <- which.min(subdata[,17])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "pneumonia"){
irow <- which.min(subdata[,23])
print(subdata[irow,]$Hospital.Name)
}
}
source("best.R")
setwd("D:/JOHNS HOPKINS Data Science Program/R Programming/Assignment/Assignment3")
#best function
best <- function(state, outcome){
#讀取outcome-of-care-measures.csv
data <- read.csv("outcome-of-care-measures.csv",colClasses="character",na.strings=c("Not Available","NA"))
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name for min row
if(outcome == "heart attack" ){
irow <- which.min(subdata[,11])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "heart failure"){
irow <- which.min(subdata[,17])
print(subdata[irow,]$Hospital.Name)
}
else if(outcome == "pneumonia"){
irow <- which.min(subdata[,23])
print(subdata[irow,]$Hospital.Name)
}
}
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
source("submitscript3.R")
source("best.R")
source("submitscript3.R")
submit()
submit()
submit()
rankhospital <- function(state, outcome, num ="best"){
##讀取outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11])
data[,17] <- as.numeric(data[,17])
data[,23] <- as.numeric(data[,23])
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name by num
if(outcome == "heart attack" ){
subdata <- subdata[order(subdata[,11],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,11])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
else if(outcome == "heart failure"){
subdata <- subdata[order(subdata[,17],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,17])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
else if(outcome == "pneumonia"){
subdata <- subdata[order(subdata[,23],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,23])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
}
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num ="best"){
##讀取outcome data
data <- read.csv("outcome-of-care-measures.csv",colClasses="character",na.strings=c("Not Available","NA"))
#設定"heart attack","heart failure","pneumonia"欄位為數值
data[,11] <- as.numeric(data[,11])
data[,17] <- as.numeric(data[,17])
data[,23] <- as.numeric(data[,23])
#Check that state and outcome are valid
if(!(state %in% data$State)) {
stop("invalid state")
}
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
#subset data filter state == State
subdata <- subset(data, data[,7]==state)
#filter outcome and show Hospital.Name by num
if(outcome == "heart attack" ){
subdata <- subdata[order(subdata[,11],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,11])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
else if(outcome == "heart failure"){
subdata <- subdata[order(subdata[,17],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,17])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
else if(outcome == "pneumonia"){
subdata <- subdata[order(subdata[,23],subdata[,2]),]#排序
subdata <- subset(subdata, !is.na(subdata[,23])) #過濾NA
if(num == "best"){
print(subdata[1,]$Hospital.Name)
}
else if(num == "worst"){
len <- as.numeric(nrow(subdata))
print(subdata[len,])$Hospital.Name
}
else{
print(subdata[num,])$Hospital.Name
}
}
}
source("rankhospital.R")
source("submitscript3.R")
submit()
submit()
submit()
submit()
library(reshape)
library(sqldf)
rankall <- function(outcome, num="best"){
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
colnames(data)[7] <- "s" #state
colnames(data)[2] <- "h" #hospital
colnames(data)[11] <- "ha" #heart attack
colnames(data)[17] <- "hf" #heart failure
colnames(data)[23] <- "p" #pneumonia
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack" ){
subdata <- data[, c("s","h","ha")]
colnames(subdata)[3] <- "d" #??a???
return(pickdata(subdata, num))
}
else if(outcome == "heart failure"){
subdata <- data[, c("s","h","hf")]
colnames(subdata)[3] <- "d" #??f???
return(pickdata(subdata, num))
}
else if(outcome == "pneumonia"){
subdata <- data[, c("s","h","p")]
colnames(subdata)[3] <- "d" #?????
return(pickdata(subdata, num))
}
}
pickdata <- function(subdata, num){
if(num == "best"){ #瘥?撌?in
byState <- sqldf("select s ,min(d) as d from subdata group by s")
result <- sqldf("select subdata.h, subdata.s
from subdata join byState
on subdata.s=byState.s and subdata.d=byState.d")
return(result)
}else if(num == "worst"){ #瘥?撌?ax
byState <- sqldf("select s ,max(d) as d from subdata group by s")
result <- sqldf("select subdata.h, subdata.s
from subdata join byState
on subdata.s=byState.s and subdata.d=byState.d")
return(result)
}else if(is.numeric(num)){
byState <- sqldf("select s ")
#..............
}else{
return(subdata[, c("h","s")])
}
}
source("rankall.R")
install.packages("reshape")
library("reshape", lib.loc="C:/Program Files/R/R-3.0.2/library")
install.packages("sqldf")
library("sqldf", lib.loc="C:/Program Files/R/R-3.0.2/library")
library(reshape)
library(sqldf)
rankall <- function(outcome, num="best"){
data <- read.csv("outcome-of-care-measures.csv",colClasses="character")
data[,11] <- as.numeric(data[,11]) #heart attack
data[,17] <- as.numeric(data[,17]) #heart failure
data[,23] <- as.numeric(data[,23]) #pneumonia
colnames(data)[7] <- "s" #state
colnames(data)[2] <- "h" #hospital
colnames(data)[11] <- "ha" #heart attack
colnames(data)[17] <- "hf" #heart failure
colnames(data)[23] <- "p" #pneumonia
if(!(outcome %in% c("heart attack","heart failure","pneumonia"))) {
stop("invalid outcome")
}
if(outcome == "heart attack" ){
subdata <- data[, c("s","h","ha")]
colnames(subdata)[3] <- "d" #??a???
return(pickdata(subdata, num))
}
else if(outcome == "heart failure"){
subdata <- data[, c("s","h","hf")]
colnames(subdata)[3] <- "d" #??f???
return(pickdata(subdata, num))
}
else if(outcome == "pneumonia"){
subdata <- data[, c("s","h","p")]
colnames(subdata)[3] <- "d" #?????
return(pickdata(subdata, num))
}
}
pickdata <- function(subdata, num){
if(num == "best"){ #瘥?撌?in
byState <- sqldf("select s ,min(d) as d from subdata group by s")
result <- sqldf("select subdata.h, subdata.s
from subdata join byState
on subdata.s=byState.s and subdata.d=byState.d")
return(result)
}else if(num == "worst"){ #瘥?撌?ax
byState <- sqldf("select s ,max(d) as d from subdata group by s")
result <- sqldf("select subdata.h, subdata.s
from subdata join byState
on subdata.s=byState.s and subdata.d=byState.d")
return(result)
}else if(is.numeric(num)){
byState <- sqldf("select s ")
#..............
}else{
return(subdata[, c("h","s")])
}
}
source("rankall.R")
source("submitscript3.R")
submit()
9
